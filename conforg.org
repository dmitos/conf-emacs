* init.el

* CONFIGURACION INICIAL
#+BEGIN_SRC emacs-lisp
  ;; abre con la teclas C-c I este archivo de configuracion
  (defun find-config ()
    (interactive)
    (find-file "~/.emacs.d/conforg.org"))
  (global-set-key (kbd "C-c I") 'find-config)
#+END_SRC
* INFORMACION PERSONAL
#+BEGIN_SRC emacs-lisp
  (setf user-full-name "Diego Otero"
        user-mail-address "dmitos@gmail.com")

#+END_SRC

#+RESULTS:
: dmitos@gmail.com

* ASPECTO Y VISUALIZACION
** Cancela el mensaje de bienvenida.
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC

** cambio el tema de emacs
#+BEGIN_SRC emacs-lisp
(use-package seti-theme
  :ensure t
  :config (load-theme 'wombat t))
#+END_SRC

** ilumina la linea del cursor
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
  (global-linum-mode t)
(add-to-list 'load-path "~/.emacs.d/elpa/linum-highlight/")
  (require 'linum-highlight-current-line-number)
  (setq linum-format 'linum-highlight-current-line-number)

#+END_SRC

#+RESULTS:
: linum-highlight-current-line-number

** VISIBLE BELL
#+BEGIN_SRC emacs-lisp
;; turn on visible bell
(setq visible-bell t)

#+END_SRC


* WHICH-KEY muestra que teclas siguen
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config
  (which-key-mode))
#+END_SRC

* SWIPER y COUNSEL
#+BEGIN_SRC emacs-lisp
;; it looks like counsel is a requirement for swiper
(use-package counsel
  :ensure t
  )

(use-package swiper
  :ensure try
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> l") 'counsel-load-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))
#+END_SRC

* ORG
*** ORG-BULLETS - Viñetas
#+BEGIN_SRC emacs-lisp
;;(use-package org-bullets
;;  :ensure t
;;  :config
;;  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
** ORG-MODE
   #+BEGIN_SRC emacs-lisp
     (require 'org)
     (define-key global-map "\C-cl" 'org-store-link)
     (define-key global-map "\C-ca" 'org-agenda)
     (setq org-log-done t)
     (setq org-todo-keywords
     '((sequence "TODO(t!)" "TAREA [DIEGO](e@/!)" "ESPERANDO(s@/!)" "|" "FINALIZADO(f!)")))
        
   #+END_SRC
* BUFFERS Y WINDOWS
** ABRE BUFFER EN LA MISMA VENTANA
#+BEGIN_SRC emacs-lisp
(defalias 'list-buffer 'ibuffer) ; abre el buffer en la misma ventana
#+END_SRC

* ACE_WIMDOW
 - muestra numero en la ventana para saltar entre ellas
#+BEGIN_SRC emacs-lisp
(windmove-default-keybindings)
; add this to init.el
(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0))))) 
    ))

#+END_SRC

* PYTHON
#+BEGIN_SRC emacs-lisp
  (setq py-python-command "python")
  (setq python-shell-interpreter "python")

#+END_SRC
** SMARTPARENS
#+BEGIN_SRC emacs-lisp
  ;; (use-package smartparens
  ;;   :ensure t
  ;;   :config
  ;;   (use-package smartparens-python)
  ;;   (smartparens-global-mode t))

#+END_SRC
** JEDI
#+BEGIN_SRC emacs-lisp

  (use-package jedi
    :ensure t
    :init
    (add-hook 'python-mode-hook 'jedi:setup)
    (add-hook 'python-mode-hook 'jedi:ac-setup))

#+END_SRC
** ELPY
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :config
    (elpy-enable))

#+END_SRC

* HIGHLIGHT INDENT GUIDE
hasta donde veo no funciona en php
#+BEGIN_SRC emacs-lisp
(use-package highlight-indent-guides
  :after
  (python-mode)
  (php-mode)
  
  :init
  (setf highlight-indent-guides-method 'fill)
  (add-hook 'python-mode 'highlight-indent-guides-mode)
  (add-hook 'php-mode 'highlight-indent-guides-mode))

#+END_SRC

* AUTOCOMPLETADO
#+BEGIN_SRC emacs-lisp
(use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)
    ))
#+END_SRC
* FLYCHECK
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))


#+END_SRC
* MAGIT
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :init
    (progn
    (bind-key "C-x g" 'magit-status)))

  (use-package git-gutter
    :ensure t
    :init
    (global-git-gutter-mode +1))
#+END_SRC
* NO USADOS 
*** POR TEMA DE CONFIGURACION O CRASH POR OTRA CONFIG
**** IDO
#+BEGIN_SRC emacs-lisp
;; (setq ido-enable-flex-matching t)
;; (setq ido-everywhere t)
;; (ido-mode 1)
#+END_SRC
* UNDO TREE
  #+BEGIN_SRC emacs-lisp
    (use-package undo-tree
      :ensure t
      :init
      (global-undo-tree-mode))
      
  #+END_SRC

* EXPAND-REGION
#+BEGIN_SRC emacs-lisp
;; expande semanticamente el area
(use-package expand-region
    :ensure t
    :config
    (global-set-key (kbd "C-z") 'er/expand-region))

#+END_SRC
* IEDIT
#+BEGIN_SRC emacs-lisp
  (use-package iedit
    :ensure t)
#+END_SRC
  
* OTROS PAQUETES
** BEACON 
flashea el lugar del cursor para encontrarlo al mover el buffer
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :config
    (beacon-mode 1)
    (setq beacon-color "#ff8000"))
#+END_SRC

** PAREN
 cierra y abre parentesis
<DESACTIVADO>
#+BEGIN_SRC emacs-lisp
  ;; (require 'paren)
  ;; (show-paren-mode 1)
  ;; (setq show-paren-delay 0)
  ;; (set-face-background 'show-paren-match (face-background 'default))
  ;; (set-face-foreground 'show-paren-match "#def")
  ;; (set-face-attribute 'show-paren-match nil :weight 'extra-bold)

#+END_SRC


* PAREDIT
#+BEGIN_SRC emacs-lisp

  (use-package paredit
    :diminish paredit-mode
    :config
    (add-hook 'emacs-lisp-mode-hook 'enable-paredit-mode)
    (add-hook 'lisp-mode-hook 'enable-paredit-mode)
    (add-hook 'lisp-interaction-mode-hook 'enable-paredit-mode))

#+END_SRC
* PROJECTILE
#+BEGIN_SRC emacs-lisp
(use-package projectile
    :ensure t
    :config
    (projectile-global-mode)
  (setq projectile-completion-system 'ivy))
#+END_SRC

* COUNSEL-PROJECTILE
#+BEGIN_SRC emacs-lisp
(use-package counsel-projectile
    :ensure t
    :config
    (counsel-projectile-mode)
  )
#+END_SRC  

* SPEEDBAR
#+BEGIN_SRC emacs-lisp

  (use-package speedbar
    :config
    (progn
      (set-variable 'speedbar-use-images nil)
      (speedbar-add-supported-extension ".rst")))

#+END_SRC

* SR-SPEEDBAR
#+BEGIN_SRC emacs-lisp

  (use-package sr-speedbar
    :ensure t
    :init
    (set-variable 'sr-speedbar-right-side nil))

#+END_SRC

* PROJECTILE-SPEEDBAR
#+BEGIN_SRC emacs-lisp
  (use-package projectile-speedbar
    :ensure t)
  ;;    :config
  ;;    (global-set-key (kbd "C-<f2>") 'projectile-speedbar))
#+END_SRC

* EMMET-MODE
#+BEGIN_SRC emacs-lisp

  (use-package emmet-mode
    :ensure t
    :config
    (add-hook 'clojure-mode-hook 'emmet-mode))

#+END_SRC
* MULTI-MODE-WEB
intentar usarlo con use-package
#+BEGIN_SRC emacs-lisp

  (require 'multi-web-mode)
  (setq mweb-default-major-mode 'html-mode)
  (setq mweb-tags '((php-mode "<\\?php\\|<\\? \\|<\\?=" "\\?>")
                    (js-mode "<script +\\(type=\"text/javascript\"\\|language=\"javascript\"\\)[^>]*>" "</script>")
                    (css-mode "<style +type=\"text/css\"[^>]*>" "</style>")))
  (setq mweb-filename-extensions '("php" "htm" "html" "ctp" "phtml" "php4" "php5"))
  (multi-web-global-mode 1)

#+END_SRC
* YASNIPPET
#+BEGIN_SRC emacs-lisp

  ;; ;;YASnippet
  ;; (add-to-list 'load-path "~/.emacs.d/yasnippet")
  ;; (require 'yasnippet)
  ;; (yas-global-mode 1)

  ;; ;;popup on YASnippet
  ;; (require 'popup)
  ;; (require 'yasnippet)

  ;; ;; add some shotcuts in popup menu mode
  ;; (define-key popup-menu-keymap (kbd "M-n") 'popup-next)
  ;; (define-key popup-menu-keymap (kbd "TAB") 'popup-next)
  ;; (define-key popup-menu-keymap (kbd "<tab>") 'popup-next)
  ;; (define-key popup-menu-keymap (kbd "<backtab>") 'popup-previous)
  ;; (define-key popup-menu-keymap (kbd "M-p") 'popup-previous)

  ;; (defun yas/popup-isearch-prompt (prompt choices &optional display-fn)
  ;; (when (featurep 'popup)
  ;; (popup-menu*
  ;; (mapcar
  ;; (lambda (choice)
  ;; (popup-make-item
  ;; (or (and display-fn (funcall display-fn choice))
  ;; choice)
  ;; :value choice))
  ;; choices)
  ;; :prompt prompt
  ;; ;; start isearch mode immediately
  ;; :isearch t
  ;; )))

  ;; (setq yas/prompt-functions '(yas/popup-isearch-prompt yas/no-prompt))

  (use-package yasnippet
    :init
    (yas-global-mode)
    :config
  (yas-reload-all))
#+END_SRC
* MULTIPLE-CURSORES
#+BEGIN_SRC emacs-lisp

(use-package multiple-cursors
  :ensure t
  :bind (("M-." . mc/mark-next-like-this)
         ("M-," . mc/unmark-next-like-this)
         ("M-S-<mouse-1>" . mc/add-cursor-on-click)))

#+END_SRC

* MULTIPLE-CURSORES
se marca la region
#+BEGIN_SRC emacs-lisp

(global-set-key (kbd "C-c m c") 'mc/edit-lines)

#+END_SRC

* MOVER-TEXTO
#+BEGIN_SRC emacs-lisp
  ;; M-felecha arriba / M-flecha abajo
    (use-package move-text
      :ensure t
      :config
      (move-text-default-bindings))

#+END_SRC

* ORIGAMI
#+BEGIN_SRC emacs-lisp
(use-package origami
  :bind (("C-c TAB" . origami-recursively-toggle-node)
         ("C-\\" . origami-recursively-toggle-node)
         ("M-\\" . origami-close-all-nodes)
         ("M-+" . origami-open-all-nodes))
  :init
  (global-origami-mode))

#+END_SRC
* GOLDEN-RATIO
#+BEGIN_SRC emacs-lisp
(use-package golden-ratio
  :ensure t
  :diminish golden-ratio-mode
  :init
  (golden-ratio-mode 1))

#+END_SRC
* color-identifiers-mode
al parecer no soporta php-mode
pero esta interesante en otros lenguajes
#+BEGIN_SRC emacs-lisp
(use-package color-identifiers-mode
  :init
  ;; (add-hook 'emacs-lisp-mode-hook #'color-identifiers-mode)
  (add-hook 'after-init-hook 'global-color-identifiers-mode)
:diminish color-identifiers-mode)
#+END_SRC
* RAINBOW-DELIMITERS
COLOREA LOS PARENTESIS
#+BEGIN_SRC emacs-lisp

(use-package rainbow-delimiters
  :commands (rainbow-delimiters-mode)
  :init
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'php-mode-hook #'rainbow-delimiters-mode)
:config
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(rainbow-delimiters-depth-1-face ((t (:foreground "dark orange"))))
 '(rainbow-delimiters-depth-2-face ((t (:foreground "deep pink"))))
 '(rainbow-delimiters-depth-3-face ((t (:foreground "chartreuse"))))
 '(rainbow-delimiters-depth-4-face ((t (:foreground "deep sky blue"))))
 '(rainbow-delimiters-depth-5-face ((t (:foreground "yellow"))))
 '(rainbow-delimiters-depth-6-face ((t (:foreground "orchid"))))
 '(rainbow-delimiters-depth-7-face ((t (:foreground "spring green"))))
 '(rainbow-delimiters-depth-8-face ((t (:foreground "sienna1"))))))

#+END_SRC

* HIGHLIGHT MATCHING PARENT
#+BEGIN_SRC emacs-lisp
(defvar show-paren-delay)
(setq show-paren-delay 0.0)
(show-paren-mode t)

#+END_SRC
* PLANTUML
#+BEGIN_SRC emacs-lisp

(add-to-list
 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))
(setq org-plantuml-jar-path
      (expand-file-name "~/plantuml.jar"))

#+END_SRC
* VIMISH-FOLD
pliega y despliega bloques de texto - uso Origami
#+BEGIN_SRC emacs-lisp

  ;; (use-package vimish-fold
  ;;   :ensure t
  ;;   :defer 10
  ;;   :config
  ;;   (bind-keys :prefix-map shackra-vimish-fold-map
  ;;              :prefix "C-c v"
  ;;              ("v" . vimish-fold-toggle)
  ;;              ("V" . vimish-fold-toggle-all)
  ;;              ("f" . vimish-fold)
  ;;              ("u" . vimish-fold-unfold)
  ;;              ("u" . vimish-fold-unfold-all)
  ;;              ("d" . vimish-fold-delete)
  ;;              ("D" . vimish-fold-delete-all)
  ;;              ("n" . vimish-fold-next-fold)
  ;;              ("p" . vimish-fold-previous-fold))
  ;;   (add-hook 'prog-mode #'vimish-fold-mode))

#+END_SRC
* HIDE-SHOW
no me funciona - ver origami
#+BEGIN_SRC emacs-lisp

  ;;   (eval-after-load 'hideshow
  ;;    '(progn
  ;;      (global-set-key (kbd "C-+") 'hs-toggle-hiding)))
  ;; (hs-minor-mode 1)


#+END_SRC
